<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="quicktalkUtilities" script:language="StarBasic">REM  *****  BASIC  *****

Global oDocView
Global oKeyHandler
Global oMouseClickHandler

Sub ReadLastWordAloudinWriter
	&apos;Reads the last word of the writer document aloud as you type. To stop
	&apos;reading aloud, hit the escape key or a direction key, or click the mouse.
	&apos;See also Pitonyak, Andrew. Useful macro information for OpenOffice.org. March 21, 2013.
	select case fsGetOS()
	case &quot;WINDOWS&quot;,&quot;UNKNOWN&quot;
		&apos; Due to the latency in Windows, we can&apos;t reliably follow the text 
		&apos; with speech in real time. Instead, we will go to the end of the 
		&apos; document and read the last word.
		gotoend
		doTextReader(false)
		gotoend
	case else
		if fileExists(fsHasReadContinuousReadingHelpURL) = false then	
			CreateFile(fsHasReadContinuousReadingHelpURL,fsNow(),&quot;UTF-8&quot;)
			ShowDialog(fs_ABOUT_READ_LAST_WORD (fs_cL))
		endif
		on error resume next
		UnRegisterMyKeyMouseHandler
		gotoEnd
		oDocView = ThisComponent.getCurrentController
		oKeyHandler = createUnoListener(&quot;MyApp_&quot;, &quot;com.sun.star.awt.XKeyHandler&quot;)
		oDocView.addKeyHandler(oKeyHandler)
		oMouseClickHandler = createUnoListener(&quot;MyApp_&quot;, &quot;com.sun.star.awt.XMouseClickHandler&quot;)
		oDocView.addMouseClickHandler(oMouseClickHandler)
	end select
End Sub

Sub UnRegisterMyKeyMouseHandler
	oDocView.removeKeyHandler(oKeyHandler)
	oDocView.removeMouseClickHandler(oMouseClickHandler)
End Sub

Sub MyApp_disposing(oEvt)
	&apos;msgBox (&quot;Stopping event handlers&quot;)
End Sub

Function MyApp_mousePressed(oEvt) As Boolean
	UnRegisterMyKeyMouseHandler
End Function

Function MyApp_KeyPressed(oEvt) As Boolean
	dim sA as string
	dim iA as integer
	sA = oEvt.KeyChar
	iA = oEvt.KeyCode
  select case sA
    case &quot; &quot;, &quot;?&quot;, &quot;.&quot;, &quot;!&quot;, &quot;,&quot;,&quot;;&quot;, &quot;:&quot;,&quot;&quot;&quot;&quot;,&quot;&lt;&quot;,&quot;&gt;&quot;,&quot;(&quot;,&quot;)&quot;,&quot;[&quot;,&quot;]&quot;,&quot;-&quot;,&quot;“&quot;,&quot;”&quot;
       MyApp_KeyPressed = true
       doTextReader(true)
       typerightpluschar (sA)
    case else
    	&apos; http://www.openoffice.org/api/docs/common/ref/com/sun/star/awt/Key.html
	    select case iA
	    case 1280 &apos; return
	       MyApp_KeyPressed = true
	       doTextReader(true)
	       typerightpluschar (chr$(10))
	    case 1282 &apos; tab
	    	MyApp_KeyPressed = true
	    	doTextReader(true)
	    	typerightpluschar (chr$(9))
	    case 1281 &apos; escape
	    	UnRegisterMyKeyMouseHandler
	    case 1024,1025,1026,1027,1028,1029,1030,1031 
	    	&apos; direction keys up, down, left, right, home, end, page up, page down
	    	MyApp_KeyPressed = False
	    	UnRegisterMyKeyMouseHandler
	    case else
	       MyApp_KeyPressed = False
		end select
	end select
End Function

Function MyApp_KeyReleased(oEvt) As Boolean
	MyApp_KeyReleased = False
End Function

sub typerightpluschar(optional sA)
	if ismissing (sA) then
		sA = &quot; &quot;
	endif
	dim document   as object
	dim dispatcher as object
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dim args1(1) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;Count&quot;
	args1(0).Value = 1
	args1(1).Name = &quot;Select&quot;
	args1(1).Value = false
	dispatcher.executeDispatch(document, &quot;.uno:GoRight&quot;, &quot;&quot;, 0, args1())
	dim args2(0) as new com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;Text&quot;
	args2(0).Value = sA
	dispatcher.executeDispatch(document, &quot;.uno:InsertText&quot;, &quot;&quot;, 0, args2())
end sub

sub exportSelectionAsODP
	dim sA, sB, sC as string
	dim n as integer
	dim oAlbum
	sB = &quot;&quot;
	sA = fsGetTextSelection()
	sA = fsSchoolToolsInputBox(fs_EXPORT_SELECTION (fs_cL), getBranding (bI_SPOKEN_BRANDING), sA)
	if len (sA) &lt;&gt; 0 then
		sB = trim (left (sA, iGetBreakPoint(sA, 30)))
		if len(sB) = 0 then 
			sB = getBranding( bI_SPOKEN_BRANDING )
		endif
		sB = stripControlChrs (sB)
		sC = fsSaveSchoolToolFile(sB ,byval &quot;ODT Document (.odt),ODP Presentation (.odp),&quot; &amp; fs_NOTE(fs_cL) &amp;&quot; (.xhtml),&quot; &amp; fs_NOTE(fs_cL) &amp;&quot; (.txt)&quot; , &quot;*.odt,*.odp,*.xhtml,*.txt&quot;)
		while len (sC) &lt;&gt; 0
			if right(sC,4) = &quot;.odp&quot; then
				if fileExists(sC) then
					showDialog (fs_FILE_IS_IN_USE (fs_cL) , false)
					sC = fsSaveSchoolToolFile(sB ,byval &quot;ODP Presentation (.odp)&quot;,&quot;*.odp&quot;)
				else
					oAlbum = StarDesktop.loadComponentFromUrl (fsMyURL &amp; &quot;/templates/narrow.otp&quot;,&quot;_blank&quot;,0,dimarray())
					UpdateSlideNote (sA)
					UpdateSlideTitle (ConvertFromURL(GetFileNameWithoutExtension( sC,&quot;/&quot;)))
					UpdateSlideName (ConvertFromURL(GetFileNameWithoutExtension( sC,&quot;/&quot;)))
					if f_dlgImpressAsk.GetControl(&quot;ComboBox1&quot;).model.Enabled then
						setNoteLanguage (f_dlgImpressAsk.GetControl(&quot;ComboBox1&quot;).model.Text)
						setDocLanguage (f_dlgImpressAsk.GetControl(&quot;ComboBox1&quot;).model.Text)
					endif
					fsSaveAsPresentation(sC)
					sC=&quot;&quot;
				endif
			elseif right(sC,6) = &quot;.xhtml&quot; then
				if fbAppearsToBeXML (sA) then
					&apos; Don&apos;t add more XML
				else
					sA = fsAlterStringMarkup (sA, &quot;&lt;div&gt;&quot; &amp; chr$(10) &amp; &quot;&lt;p&gt;&quot;, &quot;&lt;/p&gt;&quot; &amp; chr$(10) &amp; &quot;&lt;p&gt;&quot;, &quot;&lt;/p&gt;&quot; &amp; chr$(10) &amp; &quot;&lt;/div&gt;&quot;, true
				endif
				finishSchoolToolsDialogSave (sC, sA) &apos; Add headers and footers etc., then save
				sC=&quot;&quot;
			elseif right(sC,4) = &quot;.txt&quot; then
				&apos;Save it as UTF-8 encoded text
				CreateFile(sC,sA,&quot;utf-8&quot;)
				sC=&quot;&quot;
			elseif right(sC,4) = &quot;.odt&quot; then
				&apos;Save it as a swriter file
				if fileExists(sC) then
					showDialog (fs_FILE_IS_IN_USE (fs_cL) , false)
					sC = fsSaveSchoolToolFile(sB ,byval &quot;ODT Document (.odt)&quot;,&quot;*.odt&quot;)
				else
					createNewWriterDoc (&quot;&quot;, sA)
					if f_dlgImpressAsk.GetControl(&quot;ComboBox1&quot;).model.Enabled then
						setDocLanguage (f_dlgImpressAsk.GetControl(&quot;ComboBox1&quot;).model.Text)
						ThisComponent.storeAsURL(sC, array())
					endif
					sC=&quot;&quot;
				endif
			else
				showDialog (fs_NO_ACTION (fs_cL) , false)
				sC = fsSaveSchoolToolFile(sB ,byval &quot;ODP Presentation (.odp),ODT Document (.odt),&quot; &amp; fs_NOTE(fs_cL) &amp;&quot; (.xhtml),&quot; &amp; fs_NOTE(fs_cL) &amp;&quot; (.txt)&quot; , &quot;*.odp,*.odt,*.xhtml,*.txt&quot;)
			endif
		wend
	endif
end sub

sub textMagnifierButton
	exportSelectionAsODP
end sub

function stripControlChrs(byval sB)	
	if len (sB) &lt;&gt; 0 then
		for n = 1 to 31 &apos;Remove control characters
			sB = fsReplaceText(sB,chr$(n),&quot; &quot;)
		next
		sB = fsReplaceText(sB,&quot;/&quot;,&quot; &quot;)
		sB = fsReplaceText(sB,&quot;\&quot;,&quot; &quot;)
		sB = fsReplaceText(sB,&quot;:&quot;,&quot; &quot;)
	else
		stripControlChrs=&quot;&quot;
	endif
	stripControlChrs = sB
end function

sub textReaderButton
	doTextReader (false)
end sub

sub doTextReader (optional bLastword)
	dim sA, sB as string
	if ismissing (bLastword) then
		bLastword = false
	endif
	sA = fsGetTextSelection()
	if bLastword then
		sA = fsGetLastWord(sA)
	endif
	sB = fsSelectionLanguage &amp; &quot;-&quot; &amp; fsSelectionCountry
	if fileExists (fsSpeechSettingURL) then 
		synthesizeSpeech (sA, sB, ENABLE_SYSTEM_LANGUAGES)
	else
		simpleSpeech (sA)
	endif
end sub

Function fsGetTextSelection() As String
	Dim oDoc   As Object
	Dim oSelection As Object
	Dim sSelectedText As String
	Dim n As Integer
	On Error Goto TEXTSELECTERROR
	oDoc=thisComponent
	sSelectedText = &quot;&quot;
	If oDoc.SupportsService(&quot;com.sun.star.sheet.SpreadsheetDocument&quot;) Then	
		fsGetSelectionAndCopy()
		sSelectedText=fsRetrieveCalcActiveCellProperty(&quot;text&quot;)
	Elseif oDoc.supportsService(&quot;com.sun.star.presentation.PresentationDocument&quot;) or oDoc.supportsService(&quot;com.sun.star.drawing.DrawingDocument&quot;) Then
		fsGetSelectionAndCopy()
		on error resume next
		sSelectedText=fsDrawProperty(&quot;text&quot;)
		on error goto TEXTSELECTERROR
		if sSelectedText = &quot;&quot; then
			sSelectedText = fsgetSlideAltContentText (ThisComponent.getCurrentController.getCurrentPage().Number-1, false) 	
		endif
	Elseif oDoc.supportsService(&quot;com.sun.star.text.TextDocument&quot;) or oDoc.supportsService(&quot;com.sun.star.text.WebDocument&quot;) or oDoc.supportsService(&quot;com.sun.star.text.GlobalDocument&quot;) Then
		oSelection=oDoc.getCurrentSelection()
		sSelectedText=&quot;&quot; 	 
		If oSelection.supportsService(&quot;com.sun.star.text.TextRanges&quot;) Then
			fsGetSelectionAndCopy()
			For n=0 To(oSelection.getCount() - 1)
				sSelectedText=sSelectedText &amp; &quot; &quot; &amp; oSelection.getByIndex(n).getString()
			Next
		Else 
			&apos;sSelectedText=oSelection.getByIndex(0).getString(
			sSelectedText=fsGetSelectionAndCopy()
		End If
		If sSelectedText=&quot; &quot; Then 
			sSelectedText=fsgetCursortoEnd()
		End If
	Else &apos;unsupported document format
		sSelectedText=&quot;&quot;
	End If
	fsGetTextSelection=Trim(sSelectedText)
	Exit Function
	TEXTSELECTERROR:
	fsGetTextSelection=&quot;&quot;
End Function

Function fsRetrieveCalcActiveCellProperty(strA) As String
	&apos; Modified from Sub from: Paolo Mantovani 
	&apos; email: mantovani.paolo@tin.it 
	&apos; published at http://sourceforge.net/projects/ooomacros/files/Andrew%20Pitonyak_s%20Macro%20Doc/2006-01-25/AndrewMacro_2006-01-25.zip/download
	&apos; Gets property of the active cell.
	Dim oOldSelection &apos;The original selection of cell ranges
	Dim oRanges       &apos;A blank range created by the document
	Dim oActiveCell   &apos;The current active cell
	Dim sCellContent As String
	
	REM store the current selection
	oOldSelection=ThisComponent.CurrentSelection
	oRanges=ThisComponent.createInstance(&quot;com.sun.star.sheet.SheetCellRanges&quot;)
	ThisComponent.CurrentController.Select(oRanges)
	&apos;get the active cell!
	oActiveCell=ThisComponent.CurrentSelection
	Select Case strA
	Case &quot;country&quot;
		sCellContent=oActiveCell.CharLocale.Country  
	Case &quot;language&quot;
		sCellContent=oActiveCell.CharLocale.Language
	Case &quot;asian-language&quot;
		sCellContent=oActiveCell.CharLocaleAsian.Language
	Case &quot;complex-language&quot;
		sCellContent=oActiveCell.CharLocaleComplex.Language
	Case &quot;asian-country&quot;
		sCellContent=oActiveCell.CharLocaleAsian.Country
	Case &quot;complex-country&quot;
		sCellContent=oActiveCell.CharLocaleComplex.Country
	Case Else
		 sCellContent=oActiveCell.getString()
	End Select
	&apos;restore the old selection (but loosing the previous active cell)
	ThisComponent.CurrentController.Select(oOldSelection)
		fsRetrieveCalcActiveCellProperty=sCellContent
End Function 

Function fsGetClipBoard as String
	&apos;Based On listing Listing 5.64: View the clipboard As text.
	&apos;by Andrew Pitonyak at http://www.pitonyak.org/AndrewMacro.odt 
	&apos;October 28,2010
	Dim oClip,oClipContents,oTypes
	Dim oConverter,convertedString$
	Dim i%,iPlainLoc%
	iPlainLoc=-1
	Dim s$ : s$=&quot;com.sun.star.datatransfer.clipboard.SystemClipboard&quot;
	oClip=createUnoService(s$)
	oConverter=createUnoService(&quot;com.sun.star.script.Converter&quot;) 
	&apos;Print &quot;Clipboard name=&quot; &amp; oClip.getName()fsGetClipBoard
	&apos;Print &quot;Implemantation name=&quot; &amp; oClip.getImplementationName()
	oClipContents=oClip.getContents()
	oTypes=oClipContents.getTransferDataFlavors()
	Dim msg$,iLoc%,outS
	msg=&quot;&quot;
	iLoc=-1
	For i=LBound(oTypes) To UBound(oTypes)
		 If oTypes(i).MimeType=&quot;text/plain;charset=utf-16&quot; Then 
			iPlainLoc=i
			Exit For
		 End If
		 &apos;msg=msg &amp; &quot;Mime type=&quot; &amp; x(ii).MimeType &amp; &quot; normal=&quot; &amp; _
		 &apos;      x(ii).HumanPresentableName &amp; Chr$(10)
	Next
	If (iPlainLoc &gt;=0) Then
		 convertedString=oConverter.convertToSimpleType( _
			   oClipContents.getTransferData(oTypes(iPlainLoc)),_
			   com.sun.star.uno.TypeClass.STRING)
		 fsGetClipBoard=convertedString
	Else
		 fsGetClipBoard=&quot;&quot;
	End If
End Function

Function fsDrawProperty(strA) As String
	Dim oDoc As Object
	Dim oController As Object
	Dim oSelection As Object
	Dim s1r As String
	s1r=&quot;&quot;
	oDoc=ThisComponent
	oController=oDoc.getCurrentController()
	oSelection=oController.getSelection() 
	If oSelection.supportsService(&quot;com.sun.star.text.TextCursor&quot;) Then
		Select Case strA
			Case &quot;country&quot;
				s1r=oSelection.CharLocale.Country  
			Case &quot;language&quot;
				s1r=oSelection.CharLocale.Language
			Case &quot;asian-language&quot;
				s1r=oSelection.CharLocaleAsian.Language
			Case &quot;complex-language&quot;
				s1r=oSelection.CharLocaleComplex.Language
			Case &quot;asian-country&quot;
				s1r=oSelection.CharLocaleAsian.Country
			Case &quot;complex-country&quot;
				s1r=oSelection.CharLocaleComplex.Country
			Case Else
				s1r=oSelection.getString()
		End Select
	EndIf
	fsDrawProperty=s1r
End Function

Function fsgetCursortoEnd As String
	selecttoEnd()
	fsgetCursortoEnd=fsGetSelectionAndCopy
End Function

Function fsgetCursorWord As String
	&apos; Function To get a word under the current cursor position.
	&apos; Adapted from code contributed On 2009-04-25  by JohnV To 
	&apos; http://www.oooforum.org/forum/viewtopic.phtml?t=83411&amp;highlight=
	Dim oDoc,oVC,oTCtring
	oDoc=ThisComponent
	oVC=oDoc.getCurrentController.getViewCursor
	oTC=oDoc.getText.createTextCursorByRange(oVC,False)
	oTC.gotoEndOfWord(False)
	oTC.gotoStartOfWord(True)
	fsgetCursorWord=oTC.String 
	selectAWord()
End Function

Sub selecttoEnd
	dim document   as object
	dim dispatcher as object
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dispatcher.executeDispatch(document, &quot;.uno:GoToPrevWord&quot;, &quot;&quot;, 0, Array())
	dispatcher.executeDispatch(document, &quot;.uno:EndOfDocumentSel&quot;, &quot;&quot;, 0, Array())
End Sub

Sub InsertPageQuick	
	&apos; Inserts new slide in presentation after the current slide
	dim document   as object
	dim dispatcher as object
	viewNormal()
	wait 500
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dispatcher.executeDispatch(document, &quot;.uno:InsertPageQuick&quot;, &quot;&quot;, 0, Array())
End Sub

Sub selectAWord
	dim document   as object
	dim dispatcher as object
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dispatcher.executeDispatch(document,&quot;.uno:SelectWord&quot;, &quot;&quot;, 0, Array())
End Sub

Function fsGetSelectionAndCopy()
	&apos;We copy to the clipboard, then return the clipboard contents as text. 
	&apos;The clipboard contents can be used for external tools for the disabled that use
	&apos;the clipboard. Examples include Braille pads or pictographic symbol displays.
	dim document   as object
	dim dispatcher as object
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dispatcher.executeDispatch(document, &quot;.uno:Copy&quot;, &quot;&quot;, 0, Array())
	fsGetSelectionAndCopy=fsGetClipBoard
End Function

sub gotoEnd
	dim document   as object
	dim dispatcher as object
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dispatcher.executeDispatch(document, &quot;.uno:GoToEndOfDoc&quot;, &quot;&quot;, 0, Array())
end sub
</script:module>
